{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { hashSync } from 'bcryptjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../app/registration.service\";\nexport class ShowcustomerComponent {\n  constructor(api) {\n    this.api = api;\n  }\n  ngOnInit() {\n    this.api.apiCall().subscribe(data => {\n      this.users = data;\n    });\n    this.registerForm = new FormGroup({\n      \"firstname\": new FormControl(null, [Validators.required, Validators.pattern('[a-zA-Z]*')]),\n      \"lastname\": new FormControl(null, [Validators.required, Validators.pattern('[a-zA-Z]*')]),\n      \"email\": new FormControl(null, [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n      \"password\": new FormControl(null, [Validators.required, Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}$')]),\n      \"password_confirmation\": new FormControl(null, [Validators.required])\n    });\n  }\n  submitData() {\n    const hashedPassword = hashSync(this.registerForm.value.password, 10);\n    const formData = {\n      ...this.registerForm.value,\n      password: hashedPassword,\n      password_confirmation: hashedPassword\n    };\n    const id = this.user_data ? this.user_data.customer.id : null;\n    if (id) {\n      // If the ID exists, update the record\n      this.api.editUser(id, formData).subscribe(data => {\n        console.log(data);\n      });\n      alert(`User with ID ${id} has been updated`);\n      this.user_data.customer.firstname = this.registerForm.value.firstname;\n      this.user_data.customer.lastname = this.registerForm.value.lastname;\n      this.user_data.customer.email = this.registerForm.value.email;\n    } else {\n      // If the ID does not exist, create a new record\n      this.api.submitData(formData).subscribe(data => {\n        console.log(data);\n      });\n      alert(`New user has been created`);\n    }\n    if (this.confirmpassword.value != this.passWord.value) {\n      alert(\"password does not match\");\n      return;\n    }\n    if (this.registerForm.valid) {\n      alert(`Thank You ${this.registerForm.value.firstname}`);\n    }\n  }\n  editUser(id, data) {\n    this.api.editUser(id, data).subscribe(data => {\n      this.user_data = data;\n      console.log(this.user_data.customer);\n      this.registerForm.patchValue({\n        firstname: this.user_data.customer.firstname,\n        lastname: this.user_data.customer.lastname,\n        email: this.user_data.customer.email\n      });\n    });\n  }\n  deleteUser(id) {\n    this.api.deleteUser(id).subscribe(data => {\n      console.log('User deleted successfully');\n    });\n  }\n  get firstName() {\n    return this.registerForm.get('firstname');\n  }\n  get lastName() {\n    return this.registerForm.get('lastname');\n  }\n  get emailid() {\n    return this.registerForm.get('email');\n  }\n  get passWord() {\n    return this.registerForm.get('password');\n  }\n  get confirmpassword() {\n    return this.registerForm.get('password_confirmation');\n  }\n}\nShowcustomerComponent.ɵfac = function ShowcustomerComponent_Factory(t) {\n  return new (t || ShowcustomerComponent)(i0.ɵɵdirectiveInject(i1.RegistrationService));\n};\nShowcustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ShowcustomerComponent,\n  selectors: [[\"app-showcustomer\"]],\n  decls: 2,\n  vars: 0,\n  template: function ShowcustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"showcustomer works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","hashSync","ShowcustomerComponent","constructor","api","ngOnInit","apiCall","subscribe","data","users","registerForm","required","pattern","submitData","hashedPassword","value","password","formData","password_confirmation","id","user_data","customer","editUser","console","log","alert","firstname","lastname","email","confirmpassword","passWord","valid","patchValue","deleteUser","firstName","get","lastName","emailid","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\New folder\\registration\\src\\app\\showcustomer\\showcustomer.component.ts","C:\\New folder\\registration\\src\\app\\showcustomer\\showcustomer.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport{RegistrationService}from'../../app/registration.service';\nimport { ReturnStatement } from '@angular/compiler';\nimport{FormGroup,FormControl,Validators}from'@angular/forms';\nimport { hashSync,compareSync } from 'bcryptjs';\nimport { last } from 'rxjs';\n\n@Component({\n  selector: 'app-showcustomer',\n  templateUrl: './showcustomer.component.html',\n  styleUrls: ['./showcustomer.component.css']\n})\nexport class ShowcustomerComponent { \n  constructor(private api:RegistrationService\n  ){}\nregisterForm:any;\nusers:any;\ndata:any;\nuser_data:any;\nngOnInit():void{\n  this.api.apiCall().subscribe((data)=>{\n    this.users = data;\n  })\nthis.registerForm=new FormGroup({\n  \"firstname\":new FormControl(null,[Validators.required,Validators.pattern('[a-zA-Z]*')]),\n  \"lastname\":new FormControl(null,[Validators.required,Validators.pattern('[a-zA-Z]*')]),\n  \"email\":new FormControl(null,[Validators.required,Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n  \"password\":new FormControl(null,[Validators.required,Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}$')]),\n  \"password_confirmation\":new FormControl(null,[Validators.required]),\n});\n\n}\nsubmitData()\n{\n  const hashedPassword = hashSync(this.registerForm.value.password, 10);\n  const formData = {\n    ...this.registerForm.value,\n    password: hashedPassword,\n    password_confirmation: hashedPassword\n  } \n  const id = this.user_data ? this.user_data.customer.id : null;\n  if (id) {\n    // If the ID exists, update the record\n    this.api.editUser(id, formData).subscribe(data => {\n      console.log(data);\n    });\n    alert(`User with ID ${id} has been updated`);\n    this.user_data.customer.firstname = this.registerForm.value.firstname;\n    this.user_data.customer.lastname = this.registerForm.value.lastname;\n    this.user_data.customer.email = this.registerForm.value.email;\n  } else {\n    // If the ID does not exist, create a new record\n    this.api.submitData(formData).subscribe(data => {\n      console.log(data);\n    });\n    alert(`New user has been created`);\n  }\n  if(this.confirmpassword.value!=this.passWord.value){\n    alert(\"password does not match\");\n    return;\n  }\n  if(this.registerForm.valid){\n    alert(`Thank You ${this.registerForm.value.firstname}`);\n  }\n}\neditUser(id:number,data:any){\n  this.api.editUser(id,data).subscribe((data: any) => {\n    this.user_data = data;\n    console.log(this.user_data.customer);\n    this.registerForm.patchValue({\n      firstname:this.user_data.customer.firstname,\n      lastname:this.user_data.customer.lastname,\n      email:this.user_data.customer.email,\n    })\n  });\n}\ndeleteUser(id: number) {\n  this.api.deleteUser(id).subscribe((data) => {\n    console.log('User deleted successfully');\n  });\n}\nget firstName(){  \n  return this.registerForm.get('firstname');\n}\nget lastName(){\n  return this.registerForm.get('lastname');\n}\nget emailid(){\n  return this.registerForm.get('email');\n}\nget passWord(){\n  return this.registerForm.get('password');\n}\nget confirmpassword(){\n  return this.registerForm.get('password_confirmation');\n}\n}\n","<p>showcustomer works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}