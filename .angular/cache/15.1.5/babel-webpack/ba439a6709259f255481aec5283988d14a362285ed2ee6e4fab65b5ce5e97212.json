{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../app/registration.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(api, router) {\n    this.api = api;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      \"email\": new FormControl(null),\n      \"password\": new FormControl(null)\n    });\n    if (this.api.IsloggedIn()) {\n      this.router.navigate(['admin']);\n    }\n  }\n  onSubmit() {\n    const credentials = {\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password\n    };\n    this.api.authenticateUser(credentials).subscribe(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        if (credentials.email === 'superadmin@gmail.com') {\n          this.api.setUserRole(1); // Admin role\n          this.router.navigate(['admin']);\n        } else {\n          this.api.setUserRole(0); // User role\n          this.router.navigate(['user']);\n        }\n      }\n    }, error => {\n      alert('Authentication failed');\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.RegistrationService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 0,\n  vars: 0,\n  template: function LoginComponent_Template(rf, ctx) {},\n  styles: [\".divider[_ngcontent-%COMP%]:after, .divider[_ngcontent-%COMP%]:before {\\r\\ncontent: \\\"\\\";\\r\\nflex: 1;\\r\\nheight: 1px;\\r\\nbackground: #eee;\\r\\n}\\r\\n.h-custom[_ngcontent-%COMP%] {\\r\\nheight: calc(100% - 73px);\\r\\n}\\r\\n@media (max-width: 450px) {\\r\\n.h-custom[_ngcontent-%COMP%] {\\r\\nheight: 100%;\\r\\n}\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxXQUFXO0FBQ1gsT0FBTztBQUNQLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi5kaXZpZGVyOmFmdGVyLFxyXG4uZGl2aWRlcjpiZWZvcmUge1xyXG5jb250ZW50OiBcIlwiO1xyXG5mbGV4OiAxO1xyXG5oZWlnaHQ6IDFweDtcclxuYmFja2dyb3VuZDogI2VlZTtcclxufVxyXG4uaC1jdXN0b20ge1xyXG5oZWlnaHQ6IGNhbGMoMTAwJSAtIDczcHgpO1xyXG59XHJcbkBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xyXG4uaC1jdXN0b20ge1xyXG5oZWlnaHQ6IDEwMCU7XHJcbn1cclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAAOA,SAAS,EAACC,WAAW,QAAO,gBAAgB;;;;AASnD,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,GAAuB,EAASC,MAAc;IAA9C,QAAG,GAAHD,GAAG;IAA6B,WAAM,GAANC,MAAM;EACxD;EAGJC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAC,IAAIP,SAAS,CAAC;MAC3B,OAAO,EAAC,IAAIC,WAAW,CAAC,IAAI,CAAC;MAC7B,UAAU,EAAC,IAAIA,WAAW,CAAC,IAAI;KAChC,CAAC;IACF,IAAG,IAAI,CAACG,GAAG,CAACI,UAAU,EAAE,EAAC;MACvB,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;EAEnC;EACAC,QAAQ;IACN,MAAMC,WAAW,GAAG;MAClBC,KAAK,EAAE,IAAI,CAACL,SAAS,CAACM,KAAK,CAACD,KAAK;MACjCE,QAAQ,EAAE,IAAI,CAACP,SAAS,CAACM,KAAK,CAACC;KAChC;IAAE,IAAI,CAACV,GAAG,CAACW,gBAAgB,CAACJ,WAAW,CAAC,CAACK,SAAS,CAChDC,QAAa,IAAI;MAChB,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAE7C,IAAIP,WAAW,CAACC,KAAK,KAAK,sBAAsB,EAAE;UAChD,IAAI,CAACR,GAAG,CAACiB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;UACzB,IAAI,CAAChB,MAAM,CAACI,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;SAChC,MAAM;UACL,IAAI,CAACL,GAAG,CAACiB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;UACzB,IAAI,CAAChB,MAAM,CAACI,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;;;IAGpC,CAAC,EACAa,KAAU,IAAI;MACbC,KAAK,CAAC,uBAAuB,CAAC;IAChC,CAAC,CACF;EACD;;AApCWrB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["FormGroup","FormControl","LoginComponent","constructor","api","router","ngOnInit","loginForm","IsloggedIn","navigate","onSubmit","credentials","email","value","password","authenticateUser","subscribe","response","token","localStorage","setItem","setUserRole","error","alert","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\New folder\\registration\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component,OnInit  } from '@angular/core';\nimport{FormGroup,FormControl} from '@angular/forms';\nimport{RegistrationService}from'../../app/registration.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  constructor(private api:RegistrationService,private router: Router\n  ){}\nloginForm:any;\n\nngOnInit(): void {\n  this.loginForm=new FormGroup({\n    \"email\":new FormControl(null),\n    \"password\":new FormControl(null),\n  });\n  if(this.api.IsloggedIn()){\n    this.router.navigate(['admin']);\n  }  \n};\nonSubmit(){\n  const credentials = {\n    email: this.loginForm.value.email,\n    password: this.loginForm.value.password\n  }; this.api.authenticateUser(credentials).subscribe(\n    (response: any) => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n\n        if (credentials.email === 'superadmin@gmail.com') {\n          this.api.setUserRole(1); // Admin role\n          this.router.navigate(['admin']);\n        } else {\n          this.api.setUserRole(0); // User role\n          this.router.navigate(['user']);\n        }\n      }\n    },\n    (error: any) => {\n      alert('Authentication failed');\n    }\n  );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}