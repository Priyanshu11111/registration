{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class RegistrationService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  apiCall() {\n    return this.http.get('http://127.0.0.1:8000/api/customers');\n  }\n  submitData(data) {\n    return this.http.post('http://127.0.0.1:8000/api/customers', data);\n  }\n  deleteUser(id) {\n    return this.http.delete(`http://127.0.0.1:8000/api/customers/${id}`);\n  }\n  editUser(id, data) {\n    return this.http.get(`http://127.0.0.1:8000/api/customers/${id}`, data);\n  }\n  updateUser(id, data) {\n    return this.http.put(`http://127.0.0.1:8000/api/customers/${id}`, data);\n  }\n  checkEmailExists(email) {\n    return this.http.get(`http://127.0.0.1:8000/api/customers?email=${email}`);\n  }\n  /*   authenticateUser(credentials: any) {\r\n      return this.http.post('http://127.0.0.1:8000/api/login', credentials);\r\n    } */\n  authenticateUser(credentials) {\n    return this.http.post('http://127.0.0.1:8000/api/login', credentials).pipe(map(response => {\n      if (response.token && response.role) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('role', response.role);\n        return true;\n      } else {\n        return false;\n      }\n    }));\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  IsloggedIn() {\n    return localStorage.getItem('token') !== null;\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['login']);\n  }\n}\nRegistrationService.ɵfac = function RegistrationService_Factory(t) {\n  return new (t || RegistrationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegistrationService,\n  factory: RegistrationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,MAAM;;;;AAK1B,OAAM,MAAOC,mBAAmB;EAC9BC,YAAoBC,IAAe,EAASC,MAAa;IAArC,SAAI,GAAJD,IAAI;IAAoB,WAAM,GAANC,MAAM;EAAW;EAC7DC,OAAO;IACL,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,qCAAqC,CAAC;EAC7D;EACAC,UAAU,CAACC,IAAQ;IAEjB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,qCAAqC,EAACD,IAAI,CAAC;EACnE;EACAE,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC,uCAAuCD,EAAE,EAAE,CAAC;EACtE;EACAE,QAAQ,CAACF,EAAU,EAAEH,IAAS;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAC,uCAAuCK,EAAE,EAAE,EAAEH,IAAI,CAAC;EACzE;EACAM,UAAU,CAACH,EAAS,EAACH,IAAQ;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACY,GAAG,CAAC,uCAAuCJ,EAAE,EAAE,EAAEH,IAAI,CAAC;EACzE;EACAQ,gBAAgB,CAACC,KAAa;IAC5B,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAAC,6CAA6CW,KAAK,EAAE,CAAC;EAC5E;EACF;;;EAGEC,gBAAgB,CAACC,WAAgB;IAC/B,OAAO,IAAI,CAAChB,IAAI,CAACM,IAAI,CAAC,iCAAiC,EAAEU,WAAW,CAAC,CAACC,IAAI,CACxEpB,GAAG,CAAEqB,QAAa,IAAI;MACpB,IAAIA,QAAQ,CAACC,KAAK,IAAID,QAAQ,CAACE,IAAI,EAAE;QACnCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACC,KAAK,CAAC;QAC7CE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEJ,QAAQ,CAACE,IAAI,CAAC;QAC3C,OAAO,IAAI;OACZ,MAAM;QACL,OAAO,KAAK;;IAEhB,CAAC,CAAC,CACH;EACH;EACAG,QAAQ,CAACJ,KAAa;IACpBE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;EACtC;EACAK,QAAQ;IACN,OAAOH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;EACtC;EACAC,UAAU;IACR,OAAOL,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;EAC/C;EACAE,MAAM;IACJN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;;AAjDW/B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAgC,SAAnBhC,mBAAmB;EAAAiC,YAFlB;AAAM","names":["map","RegistrationService","constructor","http","router","apiCall","get","submitData","data","post","deleteUser","id","delete","editUser","updateUser","put","checkEmailExists","email","authenticateUser","credentials","pipe","response","token","role","localStorage","setItem","setToken","getToken","getItem","IsloggedIn","logout","removeItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\New folder\\registration\\src\\app\\registration.service.ts"],"sourcesContent":["import {Injectable } from '@angular/core';\nimport{HttpClient,HttpHeaders}from '@angular/common/http'\nimport { Router } from '@angular/router';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n  constructor(private http:HttpClient,private router:Router) { }\n  apiCall(){\n    return this.http.get('http://127.0.0.1:8000/api/customers');\n  }\n  submitData(data:any)  \n  {\n    return this.http.post('http://127.0.0.1:8000/api/customers',data);  \n  }\n  deleteUser(id: number) {\n    return this.http.delete(`http://127.0.0.1:8000/api/customers/${id}`);\n  }\n  editUser(id: number, data: any) {\n    return this.http.get(`http://127.0.0.1:8000/api/customers/${id}`, data);\n  }\n  updateUser(id:number,data:any){\n    return this.http.put(`http://127.0.0.1:8000/api/customers/${id}`, data)\n  }\n  checkEmailExists(email: string) {\n    return this.http.get(`http://127.0.0.1:8000/api/customers?email=${email}`);\n  }\n/*   authenticateUser(credentials: any) {\n    return this.http.post('http://127.0.0.1:8000/api/login', credentials);\n  } */\n  authenticateUser(credentials: any) {\n    return this.http.post('http://127.0.0.1:8000/api/login', credentials).pipe(\n      map((response: any) => {\n        if (response.token && response.role) {\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('role', response.role);\n          return true;\n        } else {\n          return false;\n        }\n      })\n    );\n  }\n  setToken(token: string) :void{  \n    localStorage.setItem('token', token);\n  }\n  getToken() :string|null{\n    return localStorage.getItem('token');\n  }\n  IsloggedIn(){\n    return localStorage.getItem('token') !== null;\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['login']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}