{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { hashSync } from 'bcryptjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../app/registration.service\";\nimport * as i2 from \"@angular/router\";\nexport class RegistrationComponent {\n  constructor(api, router) {\n    this.api = api;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.api.apiCall().subscribe(data => {\n      this.users = data;\n      console.log(\"registrationComponent\");\n      console.log(this.users);\n    });\n    this.registerForm = new FormGroup({\n      \"firstname\": new FormControl(null, [Validators.required, Validators.pattern('[a-zA-Z]*')]),\n      \"lastname\": new FormControl(null, [Validators.required, Validators.pattern('[a-zA-Z]*')]),\n      \"email\": new FormControl(null, [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n      \"password\": new FormControl(null, [Validators.required, Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}$')]),\n      \"password_confirmation\": new FormControl(null, [Validators.required])\n    });\n    this.router.params.subscribe(params => {\n      this.editUser(params[\"id\"], []);\n    });\n  }\n  submitData() {\n    const hashedPassword = hashSync(this.registerForm.value.password, 10);\n    const formData = {\n      ...this.registerForm.value,\n      password: hashedPassword,\n      password_confirmation: hashedPassword\n    };\n    const id = this.user_data ? this.user_data.customer.id : null;\n    if (id) {\n      // If the ID exists, update the record\n      this.api.updateUser(id, formData).subscribe(data => {\n        console.log(data);\n      });\n      alert(`User with ID ${id} has been updated`);\n      this.user_data.customer.firstname = this.registerForm.value.firstname;\n      this.user_data.customer.lastname = this.registerForm.value.lastname;\n      this.user_data.customer.email = this.registerForm.value.email;\n    } else {\n      // If the ID does not exist, create a new record\n      this.api.submitData(formData).subscribe(data => {\n        console.log(data);\n      });\n      alert(`New user has been created`);\n    }\n    if (this.confirmpassword.value != this.passWord.value) {\n      alert(\"password does not match\");\n      return;\n    }\n    if (this.registerForm.valid) {\n      alert(`Thank You ${this.registerForm.value.firstname}`);\n    }\n  }\n  editUser(id, data) {\n    this.api.editUser(id, data).subscribe(data => {\n      this.user_data = data;\n      console.log(this.user_data.customer);\n      this.registerForm.patchValue({\n        firstname: this.user_data.customer.firstname,\n        lastname: this.user_data.customer.lastname,\n        email: this.user_data.customer.email\n      });\n    });\n  }\n  deleteUser(id) {\n    this.api.deleteUser(id).subscribe(data => {\n      console.log('User deleted successfully');\n    });\n  }\n  get firstName() {\n    return this.registerForm.get('firstname');\n  }\n  get lastName() {\n    return this.registerForm.get('lastname');\n  }\n  get emailid() {\n    return this.registerForm.get('email');\n  }\n  get passWord() {\n    return this.registerForm.get('password');\n  }\n  get confirmpassword() {\n    return this.registerForm.get('password_confirmation');\n  }\n}\nRegistrationComponent.ɵfac = function RegistrationComponent_Factory(t) {\n  return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.RegistrationService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nRegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationComponent,\n  selectors: [[\"app-registration\"]],\n  decls: 0,\n  vars: 0,\n  template: function RegistrationComponent_Template(rf, ctx) {},\n  styles: [\".content[_ngcontent-%COMP%]{\\r\\n    max-width: 500px;\\r\\n    margin: auto;\\r\\n    padding: 2% 2%; \\r\\n}\\r\\ninput.ng-invalid[_ngcontent-%COMP%]{\\r\\n    border-left: 5px solid red;\\r\\n}\\r\\ninput.ng-valid[_ngcontent-%COMP%]{\\r\\n    border-left: 5px solid green;\\r\\n}\\r\\nbutton[_ngcontent-%COMP%]\\r\\n{\\r\\nbackground-color: white;\\r\\ncolor: black;\\r\\ntext-align: center;\\r\\n}\\r\\nbutton[_ngcontent-%COMP%]:hover\\r\\n{\\r\\n    background-color: aqua;\\r\\n    color: black;\\r\\n}\\r\\n.error[_ngcontent-%COMP%]\\r\\n{\\r\\n    color: red;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSwwQkFBMEI7QUFDOUI7QUFDQTtJQUNJLDRCQUE0QjtBQUNoQztBQUNBOztBQUVBLHVCQUF1QjtBQUN2QixZQUFZO0FBQ1osa0JBQWtCO0FBQ2xCO0FBQ0E7O0lBRUksc0JBQXNCO0lBQ3RCLFlBQVk7QUFDaEI7QUFDQTs7SUFFSSxVQUFVO0FBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGVudHtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICBwYWRkaW5nOiAyJSAyJTsgXHJcbn1cclxuaW5wdXQubmctaW52YWxpZHtcclxuICAgIGJvcmRlci1sZWZ0OiA1cHggc29saWQgcmVkO1xyXG59XHJcbmlucHV0Lm5nLXZhbGlke1xyXG4gICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCBncmVlbjtcclxufVxyXG5idXR0b25cclxue1xyXG5iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuY29sb3I6IGJsYWNrO1xyXG50ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuYnV0dG9uOmhvdmVyXHJcbntcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGFxdWE7XHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbn1cclxuLmVycm9yXHJcbntcclxuICAgIGNvbG9yOiByZWQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","hashSync","RegistrationComponent","constructor","api","router","ngOnInit","apiCall","subscribe","data","users","console","log","registerForm","required","pattern","params","editUser","submitData","hashedPassword","value","password","formData","password_confirmation","id","user_data","customer","updateUser","alert","firstname","lastname","email","confirmpassword","passWord","valid","patchValue","deleteUser","firstName","get","lastName","emailid","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\New folder\\registration\\src\\app\\registration\\registration.component.ts"],"sourcesContent":["    import { ReturnStatement } from '@angular/compiler';\n    import { Component,OnInit } from '@angular/core';\n    import{FormGroup,FormControl,Validators}from'@angular/forms';\n    import{RegistrationService}from'../../app/registration.service';\n    import { hashSync,compareSync } from 'bcryptjs';\n    import { Router,ActivatedRoute } from '@angular/router';\n    @Component({\n\n      selector: 'app-registration',\n      templateUrl: './registration.component.html',\n      styleUrls: ['./registration.component.css']\n    })\n    export class RegistrationComponent {\n      constructor(private api:RegistrationService\n        ,public router:ActivatedRoute){}\n      registerForm:any;\n      users:any;\n      data:any;\n      user_data:any;\n      ngOnInit():void{\n        this.api.apiCall().subscribe((data)=>{\n          this.users = data;\n          console.log(\"registrationComponent\")\n          console.log(this.users);\n        })\n      this.registerForm=new FormGroup({\n        \"firstname\":new FormControl(null,[Validators.required,Validators.pattern('[a-zA-Z]*')]),\n        \"lastname\":new FormControl(null,[Validators.required,Validators.pattern('[a-zA-Z]*')]),\n        \"email\":new FormControl(null,[Validators.required,Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n        \"password\":new FormControl(null,[Validators.required,Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}$')]),\n        \"password_confirmation\":new FormControl(null,[Validators.required]),\n      });\n\n        this.router.params.subscribe((params)=>{\n            this.editUser(params[\"id\"],[])\n        })\n        }\n      submitData()\n      {\n        const hashedPassword = hashSync(this.registerForm.value.password, 10);\n        const formData = {\n          ...this.registerForm.value,\n          password: hashedPassword,\n          password_confirmation: hashedPassword\n        } \n        const id = this.user_data ? this.user_data.customer.id : null;\n        if (id) {\n          // If the ID exists, update the record\n          this.api.updateUser(id, formData).subscribe(data => {\n            console.log(data);\n          });\n          alert(`User with ID ${id} has been updated`);\n          this.user_data.customer.firstname = this.registerForm.value.firstname;\n          this.user_data.customer.lastname = this.registerForm.value.lastname;\n          this.user_data.customer.email = this.registerForm.value.email;\n        } else {\n          // If the ID does not exist, create a new record\n          this.api.submitData(formData).subscribe(data => {\n            console.log(data);\n          });\n          alert(`New user has been created`);\n        }\n        if(this.confirmpassword.value!=this.passWord.value){\n          alert(\"password does not match\");\n          return;\n        }\n        if(this.registerForm.valid){\n          alert(`Thank You ${this.registerForm.value.firstname}`);\n        }\n      }\n      editUser(id:number,data:any){\n        this.api.editUser(id,data).subscribe((data: any) => {\n          this.user_data = data;\n          console.log(this.user_data.customer);\n          this.registerForm.patchValue({\n            firstname:this.user_data.customer.firstname,\n            lastname:this.user_data.customer.lastname,\n            email:this.user_data.customer.email,\n          })\n        });\n      } \n      deleteUser(id: number) {\n        this.api.deleteUser(id).subscribe((data) => {\n          console.log('User deleted successfully');\n        });\n      }\n      get firstName(){  \n        return this.registerForm.get('firstname');\n      }\n      get lastName(){\n        return this.registerForm.get('lastname');\n      }\n      get emailid(){\n        return this.registerForm.get('email');\n      }\n      get passWord(){\n        return this.registerForm.get('password');\n      }\n      get confirmpassword(){\n        return this.registerForm.get('password_confirmation');\n      }\n    }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}